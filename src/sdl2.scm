;;; Copyright (c) 2013-2014 by √Ålvaro Castro Castilla. All Rights Reserved.
;;; SDL2 Foreign Function Interface


(c-define-constants
 ;; Hints
;; SDL_HINT_FRAMEBUFFER_ACCELERATION
 ;;SDL_HINT_IDLE_TIMER_DISABLED
 ;; SDL_HINT_ORIENTATIONS
 ;; SDL_HINT_RENDER_DRIVER
 ;; SDL_HINT_RENDER_OPENGL_SHADERS
 ;; SDL_HINT_RENDER_SCALE_QUALITY
 ;; SDL_HINT_RENDER_VSYNC

 SDL_AUDIO_MASK_BITSIZE
 SDL_AUDIO_MASK_DATATYPE
 SDL_AUDIO_MASK_ENDIAN
 SDL_AUDIO_MASK_SIGNED
 
 )

(c-define-struct SDL_AudioCVT
                 (needed int)
                 (src_format SDL_AudioFormat)
                 (dst_format SDL_AudioFormat)
                 (rate_incr double)
                 (buf unsigned-int8)
                 (len int)
                 (len_cvt int)
                 (len_mult int)
                 (len_ratio double))

(c-define-struct SDL_AudioSpec
                 (freq int)
                 (format SDL_AudioFormat)
                 (channels unsigned-int8)
                 (silence unsigned-int8)
                 (samples unsigned-int16)
                 (size unsigned-int32)
                 (callback SDL_AudioCallback)
                 (userdata void*))

(c-define-struct SDL_Color
                 (r unsigned-int8)
                 (g unsigned-int8)
                 (b unsigned-int8))

(c-define-struct SDL_ControllerAxisEvent
                 (type unsigned-int32)
                 (timestamp unsigned-int32)
                 (which SDL_JoystickID)
                 (axis unsigned-int8)
                 (value int16))

(c-define-struct SDL_ControllerButtonEvent
                 (type unsigned-int32)
                 (timestamp unsigned-int32)
                 (which SDL_JoystickID)
                 (button unsigned-int8)
                 (state unsigned-int8))

(c-define-struct SDL_ControllerDeviceEvent
                 (type unsigned-int32)
                 (timestamp unsigned-int32)
                 (which int32))

(c-define-struct SDL_DisplayMode
                 (format unsigned-int32)
                 (w int)
                 (h int)
                 (refresh_rate int)
                 (driverdata void*))

(c-define-struct SDL_DollarGestureEvent
                 (type unsigned-int32)
                 (timestamp unsigned-int32)
                 (touchId SDL_TouchID)
                 (gestureId SDL_GestureID)
                 (numFingers unsigned-int32)
                 (error float)
                 (x float)
                 (y float))

(c-define-struct SDL_DropEvent
                 (type unsigned-int32)
                 (timestamp unsigned-int32)
                 (file nonnull-char-string))

#;
(c-define-union SDL_Event
                (type unsigned-int32)
                (window SDL_WindowEvent)
                (key SDL_KeyboardEvent)
                (edit SDL_TextEditingEvent)
                (text SDL_TextInputEvent)
                (motion SDL_MouseMotionEvent)
                (button SDL_MouseButtonEvent)
                (wheel SDL_MouseWheelEvent)
                (jaxis SDL_JoyAxisEvent)
                (jball SDL_JoyBallEvent)
                (jhat SDL_HatEvent)
                (jbutton SDL_JoyButtonEvent)
                (jdevice SDL_JoyDeviceEvent)
                (caxis SDL_ControllerAxisEvent)
                (cbutton SDL_ControllerButtonEvent)
                (cdevine SDL_ControllerDeviceEvent)
                (quit SDL_QuitEvent)
                (user SDL_UserEvent)
                (syswm SDL_SysWMEvent)
                (tfinger SDL_TouchFingerEvent)
                (mgesture SDL_MultiGestureEvent)
                (dgesture SDL_DollarGestureEvent)
                (drop SDL_DropEvent))

(c-define-struct SDL_Finger
                 (id SDL_FingerID)
                 (x float)
                 (y float)
                 (pressure float))

(c-define-struct SDL_HapticCondition
                 (type unsigned-int16)
                 (length unsigned-int32)
                 (delay unsigned-int16)
                 (button unsigned-int16)
                 (interval unsigned-int16)
                 (right_sat (array unsigned-int16))
                 (left_sat (array unsigned-int16))
                 (right_coeff (array int16))
                 (left_coeff (array int16))
                 (deadband (array unsigned-int16))
                 (center (array int16)))

(c-define-struct SDL_HapticConstant
                 (type unsigned-int16)
                 (direction SDL_HapticDirection)
                 (length unsigned-int32)
                 (delay unsigned-int16)
                 (button unsigned-int16)
                 (interval unsigned-int16)
                 (level int16)
                 (attack_length unsigned-int16)
                 (attack_level unsigned-int16)
                 (fade_length unsigned-int16)
                 (fade_level unsigned-int16))

(c-define-struct SDL_HapticCustom
                 (type unsigned-int16)
                 (direction SDL_HapticDirection)
                 (length unsigned-int32)
                 (delay unsigned-int16)
                 (button unsigned-int16)
                 (interval unsigned-int16)
                 (channels unsigned-int8)
                 (period unsigned-int16)
                 (samples unsigned-int16)
                 (data unsigned-int16*)
                 (attack_length unsigned-int16)
                 (attack_level unsigned-int16)
                 (fade_length unsigned-int16)
                 (fade_level unsigned-int16))

(c-define-struct SDL_HapticDirection
                 (type unsigned-int8)
                 (dir (array int32)))

(c-define-union SDL_HapticEffect
                (constant SDL_HapticConstant)
                (periodic SDL_HapticPeriodic)
                (condition SDL_HapticCondition)
                (ramp SDL_HapticRamp)
                (leftright SDL_HapticLeftRight)
                (custom SDL_HapticCustom))

(c-define-struct SDL_HapticLeftRight
                 (type unsigned-int16)
                 (length unsigned-int32)
                 (large_magnitude unsigned-int16)
                 (small_magnitude unsigned-int16))

(c-define-struct SDL_HapticPeriodic
                 (type unsigned-int16)
                 (direction SDL_HapticDirection)
                 (length unsigned-int32)
                 (delay unsigned-int16)
                 (button unsigned-int16)
                 (interval unsigned-int16)
                 (period unsigned-int16)
                 (magnitude int16)
                 (offset int16)
                 (phase unsigned-int16)
                 (attack_length unsigned-int16)
                 (attack_level unsigned-int16)
                 (fade_length unsigned-int16)
                 (fade_level unsigned-int16))

(c-define-struct SDL_HapticRamp
                 (type unsigned-int16)
                 (direction SDL_HapticDirection)
                 (length unsigned-int32)
                 (delay unsigned-int16)
                 (button unsigned-int16)
                 (interval unsigned-int16)
                 (start int16)
                 (end int16)
                 (attack_length unsigned-int16)
                 (attack_level unsigned-int16)
                 (fade_length unsigned-int16)
                 (fade_level unsigned-int16))


(c-define-struct SDL_JoyAxisEvent
                 (type unsigned-int32)
                 (timestamp unsigned-int32)
                 (which SDL_JoystickID)
                 (axis unsigned-int8)
                 (value int16))

(c-define-struct SDL_JoyBallEvent
                 (type unsigned-int32)
                 (timestamp unsigned-int32)
                 (which SDL_JoystickID)
                 (ball unsigned-int8)
                 (xrel int16)
                 (yrel int16))

(c-define-struct SDL_JoyButtonEvent
                 (type unsigned-int32)
                 (timestamp unsigned-int32)
                 (which SDL_JoystickID)
                 (button unsigned-int8)
                 (state unsigned-int8))

(c-define-struct SDL_JoyDeviceEvent
                 (type unsigned-int32)
                 (timestamp unsigned-int32)
                 (which int32))

(c-define-struct SDL_JoyHatEvent
                 (type unsigned-int32)
                 (timestamp unsigned-int32)
                 (which SDL_JoystickID)
                 (hat unsigned-int8)
                 (value unsigned-int8))

(c-define-struct SDL_KeyboardEvent
                 (type unsigned-int32)
                 (timestamp unsigned-int32)
                 (windowID unsigned-int32)
                 (state unsigned-int8)
                 (repeat unsigned-int8)
                 (keysym SDL_Keysym))

(c-define-struct SDL_Keysym
                 (scancode SDL_Scancode)
                 (sym SDL_Keycode)
                 (mod unsigned-int16))

(c-define-struct SDL_MouseButtonEvent
                 (type unsigned-int32)
                 (timestamp unsigned-int32)
                 (windowID unsigned-int32)
                 (which unsigned-int32)
                 (button unsigned-int8)
                 (state unsigned-int8)
                 ;(clicks unsigned-int8) SDL 2.0.2
                 (x int)
                 (y int))

(c-define-struct SDL_MouseMotionEvent
                 (type unsigned-int32)
                 (timestamp unsigned-int32)
                 (windowID unsigned-int32)
                 (which unsigned-int32)
                 (state unsigned-int32)
                 (x int32)
                 (y int32)
                 (xrel int32)
                 (yrel int32))

(c-define-struct SDL_MouseWheelEvent
                 (type unsigned-int32)
                 (timestamp unsigned-int32)
                 (windowID unsigned-int32)
                 (which unsigned-int32)
                 (x int32)
                 (y int32))

(c-define-struct SDL_MultiGestureEvent
                 (type unsigned-int32)
                 (timestamp unsigned-int32)
                 (touchId SDL_TouchID)
                 (dTheta float)
                 (dDist float)
                 (x float)
                 (y float)
                 (numFingers unsigned-int16))

(c-define-struct SDL_Palette
                 (ncolors int)
                 (colors SDL_Color*))

(c-define-struct SDL_PixelFormat
                 (format unsigned-int32)
                 (palette SDL_Palette*)
                 (BitsPerPixel unsigned-int8)
                 (BytesPerPixel unsigned-int8)
                 (Rmask unsigned-int32)
                 (Gmask unsigned-int32)
                 (Bmask unsigned-int32)
                 (Amask unsigned-int32))

(c-define-struct SDL_Point
                 (x int)
                 (y int))

(c-define-struct SDL_QuitEvent
                 (type unsigned-int32)
                 (timestamp unsigned-int32))

;; According to SDL2 documentation, applications shouldn't have to care
;; about the internals of this structure, so we keep it opaque
;; SDL_RWops

(c-define-struct SDL_Rect
                 (x int)
                 (y int)
                 (w int)
                 (h int))

(c-define-struct SDL_RendererInfo
                 (name nonnull-char-string)
                 (flags unsigned-int32)
                 (num_texture_formats unsigned-int32)
                 (texture_formats (array unsigned-int32))
                 (max_texture_width int)
                 (max_texture_height int))

(c-define-struct SDL_Surface
                 (format SDL_PixelFormat*)
                 (w int)
                 (h int)
                 (pitch int)
                 (pixels void*)
                 (userdata void*)
                 (clip_rect SDL_Rect)
                 (refcount int))

(c-define-struct SDL_SysWMEvent
                 (type unsigned-int32)
                 (timestamp unsigned-int32)
                 (msg SDL_SysWMmsg*))

(c-define-struct SDL_SysWMinfo
                 (version SDL_version)
                 (subsystem int))

(c-define-struct SDL_SysWMmsg
                 (version SDL_version)
                 (subsystem int))

(c-define-struct SDL_TextEditingEvent
                 (type unsigned-int32)
                 (timestamp unsigned-int32)
                 (windowID unsigned-int32)
                 (text (array char))
                 (start int32)
                 (length int32))

(c-define-struct SDL_TextInputEvent
                 (type unsigned-int32)
                 (timestamp unsigned-int32)
                 (windowID unsigned-int32)
                 (text (array char)))

(c-define-struct SDL_TouchFingerEvent
                 (type unsigned-int32)
                 (timestamp unsigned-int32)
                 (touchId SDL_TouchID)
                 (fingerId SDL_FingerID)
                 (x float)
                 (y float)
                 (dx float)
                 (dy float)
                 (pressure float))

(c-define-struct SDL_UserEvent
                 (type unsigned-int32)
                 (timestamp unsigned-int32)
                 (windowID unsigned-int32)
                 (code int32)
                 (data1 void*)
                 (data2 void*))

(c-define-struct SDL_WindowEvent
                 (type unsigned-int32)
                 (timestamp unsigned-int32)
                 (windowID unsigned-int32)
                 (event unsigned-int8)
                 (data1 int32)
                 (data2 int32))

(cond-expand
 (sdl:assert
  (c-define-struct SDL_assert_data
                   (always_ignore int)
                   (trigger_count unsigned-int)
                   (condition nonnull-char-string)
                   (filename nonnull-char-string)
                   (linenum int)
                   (function nonnull-char-string)
                   (next SDL_assert_data*)))
 (else #!void))

;; The type SDL_atomic_t throws an incomplete type error
;; Anyway, should it be used in these bindings?
;; (c-define-struct SDL_atomic_t
;;                  (value int))

(c-define-struct SDL_version
                 (major unsigned-int8)
                 (minor unsigned-int8)
                 (patch unsigned-int8))




;; Macros


SDL_COMPILEDVERSION


;;------------------------------------------------------------------------------
;;!! Functions

(define SDL_AddEventWatch (c-lambda (SDL_EventFilter void*) void "SDL_AddEventWatch"))
(define SDL_AddHintCallback (c-lambda (char* SDL_HintCallback void*) void "SDL_AddHintCallback"))
(define SDL_AddTimer (c-lambda (unsigned-int32 SDL_TimerCallback void*) SDL_TimerID "SDL_AddTimer"))
(define SDL_AllocFormat (c-lambda (unsigned-int32) SDL_PixelFormat* "SDL_AllocFormat"))
(define SDL_AllocPalette (c-lambda (int) SDL_Palette* "SDL_AllocPalette"))
(define SDL_AllocRW (c-lambda () SDL_RWops* "SDL_AllocRW"))
(define SDL_AndroidGetActivity (c-lambda () void* "SDL_AndroidGetActivity"))
(define SDL_AndroidGetExternalStoragePath (c-lambda () char* "SDL_AndroidGetExternalStoragePath"))
(define SDL_AndroidGetExternalStorageState (c-lambda () int "SDL_AndroidGetExternalStorageState"))
(define SDL_AndroidGetInternalStoragePath (c-lambda () char* "SDL_AndroidGetInternalStoragePath"))
(define SDL_AndroidGetJNIEnv (c-lambda () void* "SDL_AndroidGetJNIEnv"))
(cond-expand
 (sdl:atomic
  (define SDL_AtomicAdd (c-lambda (SDL_atomic_t* int) int "SDL_AtomicAdd"))
  (define SDL_AtomicCAS (c-lambda (SDL_atomic_t* int int) SDL_bool "SDL_AtomicCAS"))
  (define SDL_AtomicCASPtr (c-lambda (void** void* void*) SDL_bool "SDL_AtomicCASPtr"))
  (define SDL_AtomicDecRef (c-lambda (SDL_atomic_t*) SDL_bool "SDL_AtomicDecRef"))
  (define SDL_AtomicGet (c-lambda (SDL_atomic_t*) int "SDL_AtomicGet"))
  (define SDL_AtomicGetPtr (c-lambda (void**) void* "SDL_AtomicGetPtr"))
  (define SDL_AtomicIncRef (c-lambda (SDL_atomic_t*) void "SDL_AtomicIncRef"))
  (define SDL_AtomicLock (c-lambda (SDL_SpinLock*) void "SDL_AtomicLock"))
  (define SDL_AtomicSet (c-lambda (SDL_atomic_t* int) int "SDL_AtomicSet"))
  (define SDL_AtomicSetPtr (c-lambda (void** void*) void* "SDL_AtomicSetPtr"))
  (define SDL_AtomicTryLock (c-lambda (SDL_SpinLock*) SDL_bool "SDL_AtomicTryLock"))
  (define SDL_AtomicUnlock (c-lambda (SDL_SpinLock*) void "SDL_AtomicUnlock")))
 (else #!void))
(define SDL_AudioInit (c-lambda (char*) int "SDL_AudioInit"))
(define SDL_AudioQuit (c-lambda () void "SDL_AudioQuit"))
(define SDL_BlitScaled (c-lambda (SDL_Surface* SDL_Rect* SDL_Surface* SDL_Rect*) int "SDL_BlitScaled"))
(define SDL_BlitSurface (c-lambda (SDL_Surface* SDL_Rect* SDL_Surface* SDL_Rect*) int "SDL_BlitSurface"))
(define SDL_BuildAudioCVT (c-lambda (SDL_AudioCVT* SDL_AudioFormat unsigned-int8 int SDL_AudioFormat unsigned-int8 int) int "SDL_BuildAudioCVT"))
(define SDL_CalculateGammaRamp (c-lambda (float unsigned-int16*) void "SDL_CalculateGammaRamp"))
(define SDL_ClearError (c-lambda () void "SDL_ClearError"))
(define SDL_ClearHints (c-lambda () void "SDL_ClearHints"))
(define SDL_CloseAudio (c-lambda () void "SDL_CloseAudio"))
(define SDL_CloseAudioDevice (c-lambda (SDL_AudioDeviceID) void "SDL_CloseAudioDevice"))
(define SDL_CompilerBarrier (c-lambda () void "SDL_CompilerBarrier"))
(define SDL_CondBroadcast (c-lambda (SDL_cond*) int "SDL_CondBroadcast"))
(define SDL_CondSignal (c-lambda (SDL_cond*) int "SDL_CondSignal"))
(define SDL_CondWait (c-lambda (SDL_cond* SDL_mutex*) int "SDL_CondWait"))
(define SDL_CondWaitTimeout (c-lambda (SDL_cond* SDL_mutex* unsigned-int32) int "SDL_CondWaitTimeout"))
(define SDL_ConvertAudio (c-lambda (SDL_AudioCVT*) int "SDL_ConvertAudio"))
(define SDL_ConvertPixels (c-lambda (int int unsigned-int32 void* int unsigned-int32 void* int) int "SDL_ConvertPixels"))
(define SDL_ConvertSurface (c-lambda (SDL_Surface* SDL_PixelFormat* unsigned-int32) SDL_Surface* "SDL_ConvertSurface"))
(define SDL_ConvertSurfaceFormat (c-lambda (SDL_Surface* unsigned-int32 unsigned-int32) SDL_Surface* "SDL_ConvertSurfaceFormat"))
(define SDL_CreateColorCursor (c-lambda (SDL_Surface* int int) SDL_Cursor* "SDL_CreateColorCursor"))
(define SDL_CreateCond (c-lambda () SDL_cond* "SDL_CreateCond"))
(define SDL_CreateCursor (c-lambda (unsigned-int8* unsigned-int8* int int int int) SDL_Cursor* "SDL_CreateCursor"))
(define SDL_CreateMutex (c-lambda () SDL_mutex* "SDL_CreateMutex"))
(define SDL_CreateRGBSurface (c-lambda (unsigned-int32 int int int unsigned-int32 unsigned-int32 unsigned-int32 unsigned-int32) SDL_Surface* "SDL_CreateRGBSurface"))
(define SDL_CreateRGBSurfaceFrom (c-lambda (void* int int int int unsigned-int32 unsigned-int32 unsigned-int32 unsigned-int32) SDL_Surface* "SDL_CreateRGBSurfaceFrom"))
(define SDL_CreateRenderer (c-lambda (SDL_Window* int unsigned-int32) SDL_Renderer* "SDL_CreateRenderer"))
(define SDL_CreateSemaphore (c-lambda (unsigned-int32) SDL_sem* "SDL_CreateSemaphore"))
(define SDL_CreateSoftwareRenderer (c-lambda (SDL_Surface*) SDL_Renderer* "SDL_CreateSoftwareRenderer"))
(define SDL_CreateSystemCursor (c-lambda (SDL_SystemCursor) SDL_Cursor* "SDL_CreateSystemCursor"))
(define SDL_CreateTexture (c-lambda (SDL_Renderer* unsigned-int32 int int int) SDL_Texture* "SDL_CreateTexture"))
(define SDL_CreateTextureFromSurface (c-lambda (SDL_Renderer* SDL_Surface*) SDL_Texture* "SDL_CreateTextureFromSurface"))
(cond-expand
 (sdl:threads
  (define SDL_CreateThread (c-lambda (SDL_ThreadFunction char* void*) SDL_Thread* "SDL_CreateThread")))
 (else #!void))
(define SDL_CreateWindow (c-lambda (char* int int int int unsigned-int32) SDL_Window* "SDL_CreateWindow"))
(define SDL_CreateWindowAndRenderer (c-lambda (int int unsigned-int32 SDL_Window** SDL_Renderer**) int "SDL_CreateWindowAndRenderer"))
(define SDL_CreateWindowFrom (c-lambda (void*) SDL_Window* "SDL_CreateWindowFrom"))
(define SDL_DelEventWatch (c-lambda (SDL_EventFilter void*) void "SDL_DelEventWatch"))
(define SDL_DelHintCallback (c-lambda (char* SDL_HintCallback void*) void "SDL_DelHintCallback"))
(define SDL_Delay (c-lambda (unsigned-int32) void "SDL_Delay"))
(define SDL_DestroyCond (c-lambda (SDL_cond*) void "SDL_DestroyCond"))
(define SDL_DestroyMutex (c-lambda (SDL_mutex*) void "SDL_DestroyMutex"))
(define SDL_DestroyRenderer (c-lambda (SDL_Renderer*) void "SDL_DestroyRenderer"))
(define SDL_DestroySemaphore (c-lambda (SDL_sem*) void "SDL_DestroySemaphore"))
(define SDL_DestroyTexture (c-lambda (SDL_Texture*) void "SDL_DestroyTexture"))
(define SDL_DestroyWindow (c-lambda (SDL_Window*) void "SDL_DestroyWindow"))
(cond-expand
 (sdl:threads
  (define SDL_DetachThread (c-lambda (SDL_Thread*) void "SDL_DetachThread")))
 (else #!void))
(define SDL_DisableScreenSaver (c-lambda () void "SDL_DisableScreenSaver"))
(define SDL_EnableScreenSaver (c-lambda () void "SDL_EnableScreenSaver"))
(define SDL_EnclosePoints (c-lambda (SDL_Point* int SDL_Rect* SDL_Rect*) SDL_bool "SDL_EnclosePoints"))
(define SDL_EventState (c-lambda (unsigned-int32 int) unsigned-int8 "SDL_EventState"))
(define SDL_FillRect (c-lambda (SDL_Surface* SDL_Rect* unsigned-int32) int "SDL_FillRect"))
(define SDL_FillRects (c-lambda (SDL_Surface* SDL_Rect* int unsigned-int32) int "SDL_FillRects"))
(define SDL_FilterEvents (c-lambda (SDL_EventFilter void*) void "SDL_FilterEvents"))
(define SDL_FlushEvent (c-lambda (unsigned-int32) void "SDL_FlushEvent"))
(define SDL_FlushEvents (c-lambda (unsigned-int32 unsigned-int32) void "SDL_FlushEvents"))
(define SDL_FreeCursor (c-lambda (SDL_Cursor*) void "SDL_FreeCursor"))
(define SDL_FreeFormat (c-lambda (SDL_PixelFormat*) void "SDL_FreeFormat"))
(define SDL_FreePalette (c-lambda (SDL_Palette*) void "SDL_FreePalette"))
(define SDL_FreeRW (c-lambda (SDL_RWops*) void "SDL_FreeRW"))
(define SDL_FreeSurface (c-lambda (SDL_Surface*) void "SDL_FreeSurface"))
(define SDL_FreeWAV (c-lambda (unsigned-int8*) void "SDL_FreeWAV"))
(define SDL_GL_BindTexture (c-lambda (SDL_Texture* float* float*) int "SDL_GL_BindTexture"))
(define SDL_GL_CreateContext (c-lambda (SDL_Window*) SDL_GLContext "SDL_GL_CreateContext"))
(define SDL_GL_DeleteContext (c-lambda (SDL_GLContext) void "SDL_GL_DeleteContext"))
(define SDL_GL_ExtensionSupported (c-lambda (char*) SDL_bool "SDL_GL_ExtensionSupported"))
(define SDL_GL_GetAttribute (c-lambda (SDL_GLattr int*) int "SDL_GL_GetAttribute"))
(define SDL_GL_GetCurrentContext (c-lambda () SDL_GLContext "SDL_GL_GetCurrentContext"))
(define SDL_GL_GetCurrentWindow (c-lambda () SDL_Window* "SDL_GL_GetCurrentWindow"))
(define SDL_GL_GetDrawableSize (c-lambda (SDL_Window* int* int*) void "SDL_GL_GetDrawableSize"))
(define SDL_GL_GetProcAddress (c-lambda (char*) void* "SDL_GL_GetProcAddress"))
(define SDL_GL_GetSwapInterval (c-lambda () int "SDL_GL_GetSwapInterval"))
(define SDL_GL_LoadLibrary (c-lambda (char*) int "SDL_GL_LoadLibrary"))
(define SDL_GL_MakeCurrent (c-lambda (SDL_Window* SDL_GLContext) int "SDL_GL_MakeCurrent"))
(define SDL_GL_SetAttribute (c-lambda (SDL_GLattr int) int "SDL_GL_SetAttribute"))
(define SDL_GL_SetSwapInterval (c-lambda (int) int "SDL_GL_SetSwapInterval"))
(define SDL_GL_SwapWindow (c-lambda (SDL_Window*) void "SDL_GL_SwapWindow"))
(define SDL_GL_UnbindTexture (c-lambda (SDL_Texture*) int "SDL_GL_UnbindTexture"))
(define SDL_GL_UnloadLibrary (c-lambda () void "SDL_GL_UnloadLibrary"))
(define SDL_GameControllerAddMapping (c-lambda (char*) int "SDL_GameControllerAddMapping"))
(define SDL_GameControllerAddMappingsFromFile (c-lambda (char*) int "SDL_GameControllerAddMappingsFromFile"))
(define SDL_GameControllerClose (c-lambda (SDL_GameController*) void "SDL_GameControllerClose"))
(define SDL_GameControllerEventState (c-lambda (int) int "SDL_GameControllerEventState"))
(define SDL_GameControllerGetAttached (c-lambda (SDL_GameController*) SDL_bool "SDL_GameControllerGetAttached"))
(define SDL_GameControllerGetAxis (c-lambda (SDL_GameController* SDL_GameControllerAxis) int16 "SDL_GameControllerGetAxis"))
(define SDL_GameControllerGetAxisFromString (c-lambda (char*) SDL_GameControllerAxis "SDL_GameControllerGetAxisFromString"))
(define SDL_GameControllerGetBindForAxis (c-lambda (SDL_GameController* SDL_GameControllerAxis) SDL_GameControllerButtonBind "SDL_GameControllerGetBindForAxis"))
(define SDL_GameControllerGetBindForButton (c-lambda (SDL_GameController* SDL_GameControllerButton) SDL_GameControllerButtonBind "SDL_GameControllerGetBindForButton"))
(define SDL_GameControllerGetButton (c-lambda (SDL_GameController* SDL_GameControllerButton) unsigned-int8 "SDL_GameControllerGetButton"))
(define SDL_GameControllerGetButtonFromString (c-lambda (char*) SDL_GameControllerButton "SDL_GameControllerGetButtonFromString"))
(define SDL_GameControllerGetJoystick (c-lambda (SDL_GameController*) SDL_Joystick* "SDL_GameControllerGetJoystick"))
(define SDL_GameControllerGetStringForAxis (c-lambda (SDL_GameControllerAxis) char* "SDL_GameControllerGetStringForAxis"))
(define SDL_GameControllerGetStringForButton (c-lambda (SDL_GameControllerButton) char* "SDL_GameControllerGetStringForButton"))
(define SDL_GameControllerMapping (c-lambda (SDL_GameController*) char* "SDL_GameControllerMapping"))
;;(define SDL_GameControllerMappingForGUID (c-lambda (SDL_JoystickGUID) char* "SDL_GameControllerMappingForGUID"))
(define SDL_GameControllerName (c-lambda (SDL_GameController*) char* "SDL_GameControllerName"))
(define SDL_GameControllerNameForIndex (c-lambda (int) char* "SDL_GameControllerNameForIndex"))
(define SDL_GameControllerOpen (c-lambda (int) SDL_GameController* "SDL_GameControllerOpen"))
(define SDL_GameControllerUpdate (c-lambda () void "SDL_GameControllerUpdate"))
(cond-expand
 (sdl:assert
  (define SDL_GetAssertionReport (c-lambda () SDL_assert_data* "SDL_GetAssertionReport")))
 (else #!void))
(define SDL_GetAudioDeviceName (c-lambda (int int) char* "SDL_GetAudioDeviceName"))
(define SDL_GetAudioDeviceStatus (c-lambda (SDL_AudioDeviceID) SDL_AudioStatus "SDL_GetAudioDeviceStatus"))
(define SDL_GetAudioDriver (c-lambda (int) char* "SDL_GetAudioDriver"))
(define SDL_GetAudioStatus (c-lambda () SDL_AudioStatus "SDL_GetAudioStatus"))
(define SDL_GetBasePath (c-lambda () char* "SDL_GetBasePath"))
(define SDL_GetCPUCacheLineSize (c-lambda () int "SDL_GetCPUCacheLineSize"))
(define SDL_GetCPUCount (c-lambda () int "SDL_GetCPUCount"))
(define SDL_GetClipRect (c-lambda (SDL_Surface* SDL_Rect*) void "SDL_GetClipRect"))
(define SDL_GetClipboardText (c-lambda () char* "SDL_GetClipboardText"))
(define SDL_GetClosestDisplayMode (c-lambda (int SDL_DisplayMode* SDL_DisplayMode*) SDL_DisplayMode* "SDL_GetClosestDisplayMode"))
(define SDL_GetColorKey (c-lambda (SDL_Surface* unsigned-int32*) int "SDL_GetColorKey"))
(define SDL_GetCurrentAudioDriver (c-lambda () char* "SDL_GetCurrentAudioDriver"))
(define SDL_GetCurrentDisplayMode (c-lambda (int SDL_DisplayMode*) int "SDL_GetCurrentDisplayMode"))
(define SDL_GetCurrentVideoDriver (c-lambda () char* "SDL_GetCurrentVideoDriver"))
(define SDL_GetCursor (c-lambda () SDL_Cursor* "SDL_GetCursor"))
(define SDL_GetDefaultCursor (c-lambda () SDL_Cursor* "SDL_GetDefaultCursor"))
(define SDL_GetDesktopDisplayMode (c-lambda (int SDL_DisplayMode*) int "SDL_GetDesktopDisplayMode"))
(define SDL_GetDisplayBounds (c-lambda (int SDL_Rect*) int "SDL_GetDisplayBounds"))
(define SDL_GetDisplayMode (c-lambda (int int SDL_DisplayMode*) int "SDL_GetDisplayMode"))
(define SDL_GetDisplayName (c-lambda (int) char* "SDL_GetDisplayName"))
(define SDL_GetError (c-lambda () char* "SDL_GetError"))
(define SDL_GetEventFilter (c-lambda (SDL_EventFilter* void**) SDL_bool "SDL_GetEventFilter"))
(define SDL_GetHint (c-lambda (char*) char* "SDL_GetHint"))
(define SDL_GetKeyFromName (c-lambda (char*) SDL_Keycode "SDL_GetKeyFromName"))
(define SDL_GetKeyFromScancode (c-lambda (SDL_Scancode) SDL_Keycode "SDL_GetKeyFromScancode"))
(define SDL_GetKeyName (c-lambda (SDL_Keycode) char* "SDL_GetKeyName"))
(define SDL_GetKeyboardFocus (c-lambda () SDL_Window* "SDL_GetKeyboardFocus"))
(define SDL_GetKeyboardState (c-lambda (int*) unsigned-int8* "SDL_GetKeyboardState"))
(define SDL_GetModState (c-lambda () SDL_Keymod "SDL_GetModState"))
(define SDL_GetMouseFocus (c-lambda () SDL_Window* "SDL_GetMouseFocus"))
(define SDL_GetMouseState (c-lambda (int* int*) unsigned-int32 "SDL_GetMouseState"))
(define SDL_GetNumAudioDevices (c-lambda (int) int "SDL_GetNumAudioDevices"))
(define SDL_GetNumAudioDrivers (c-lambda () int "SDL_GetNumAudioDrivers"))
(define SDL_GetNumDisplayModes (c-lambda (int) int "SDL_GetNumDisplayModes"))
(define SDL_GetNumRenderDrivers (c-lambda () int "SDL_GetNumRenderDrivers"))
(define SDL_GetNumTouchDevices (c-lambda () int "SDL_GetNumTouchDevices"))
(define SDL_GetNumTouchFingers (c-lambda (SDL_TouchID) int "SDL_GetNumTouchFingers"))
(define SDL_GetNumVideoDisplays (c-lambda () int "SDL_GetNumVideoDisplays"))
(define SDL_GetNumVideoDrivers (c-lambda () int "SDL_GetNumVideoDrivers"))
(define SDL_GetPerformanceCounter (c-lambda () unsigned-int64 "SDL_GetPerformanceCounter"))
(define SDL_GetPerformanceFrequency (c-lambda () unsigned-int64 "SDL_GetPerformanceFrequency"))
(define SDL_GetPixelFormatName (c-lambda (unsigned-int32) char* "SDL_GetPixelFormatName"))
(define SDL_GetPlatform (c-lambda () char* "SDL_GetPlatform"))
(define SDL_GetPowerInfo (c-lambda (int* int*) SDL_PowerState "SDL_GetPowerInfo"))
(define SDL_GetPrefPath (c-lambda (char* char*) char* "SDL_GetPrefPath"))
(define SDL_GetRGB (c-lambda (unsigned-int32 SDL_PixelFormat* unsigned-int8* unsigned-int8* unsigned-int8*) void "SDL_GetRGB"))
(define SDL_GetRGBA (c-lambda (unsigned-int32 SDL_PixelFormat* unsigned-int8* unsigned-int8* unsigned-int8* unsigned-int8*) void "SDL_GetRGBA"))
(define SDL_GetRelativeMouseMode (c-lambda () SDL_bool "SDL_GetRelativeMouseMode"))
(define SDL_GetRelativeMouseState (c-lambda (int* int*) unsigned-int32 "SDL_GetRelativeMouseState"))
(define SDL_GetRenderDrawBlendMode (c-lambda (SDL_Renderer* SDL_BlendMode*) int "SDL_GetRenderDrawBlendMode"))
(define SDL_GetRenderDrawColor (c-lambda (SDL_Renderer* unsigned-int8* unsigned-int8* unsigned-int8* unsigned-int8*) int "SDL_GetRenderDrawColor"))
(define SDL_GetRenderDriverInfo (c-lambda (int SDL_RendererInfo*) int "SDL_GetRenderDriverInfo"))
(define SDL_GetRenderTarget (c-lambda (SDL_Renderer*) SDL_Texture* "SDL_GetRenderTarget"))
(define SDL_GetRenderer (c-lambda (SDL_Window*) SDL_Renderer* "SDL_GetRenderer"))
(define SDL_GetRendererInfo (c-lambda (SDL_Renderer* SDL_RendererInfo*) int "SDL_GetRendererInfo"))
(define SDL_GetRendererOutputSize (c-lambda (SDL_Renderer* int* int*) int "SDL_GetRendererOutputSize"))
(define SDL_GetRevision (c-lambda () char* "SDL_GetRevision"))
(define SDL_GetRevisionNumber (c-lambda () int "SDL_GetRevisionNumber"))
(define SDL_GetScancodeFromKey (c-lambda (SDL_Keycode) SDL_Scancode "SDL_GetScancodeFromKey"))
(define SDL_GetScancodeFromName (c-lambda (char*) SDL_Scancode "SDL_GetScancodeFromName"))
(define SDL_GetScancodeName (c-lambda (SDL_Scancode) char* "SDL_GetScancodeName"))
(define SDL_GetSurfaceAlphaMod (c-lambda (SDL_Surface* unsigned-int8*) int "SDL_GetSurfaceAlphaMod"))
(define SDL_GetSurfaceBlendMode (c-lambda (SDL_Surface* SDL_BlendMode*) int "SDL_GetSurfaceBlendMode"))
(define SDL_GetSurfaceColorMod (c-lambda (SDL_Surface* unsigned-int8* unsigned-int8* unsigned-int8*) int "SDL_GetSurfaceColorMod"))
(define SDL_GetSystemRAM (c-lambda () int "SDL_GetSystemRAM"))
(define SDL_GetTextureAlphaMod (c-lambda (SDL_Texture* unsigned-int8*) int "SDL_GetTextureAlphaMod"))
(define SDL_GetTextureBlendMode (c-lambda (SDL_Texture* SDL_BlendMode*) int "SDL_GetTextureBlendMode"))
(define SDL_GetTextureColorMod (c-lambda (SDL_Texture* unsigned-int8* unsigned-int8* unsigned-int8*) int "SDL_GetTextureColorMod"))
(cond-expand
 (sdl:threads
  (define SDL_GetThreadID (c-lambda (SDL_Thread*) SDL_threadID "SDL_GetThreadID"))
  (define SDL_GetThreadName (c-lambda (SDL_Thread*) char* "SDL_GetThreadName")))
 (else #!void))
(define SDL_GetTicks (c-lambda () unsigned-int32 "SDL_GetTicks"))
(define SDL_GetTouchDevice (c-lambda (int) SDL_TouchID "SDL_GetTouchDevice"))
(define SDL_GetTouchFinger (c-lambda (SDL_TouchID int) SDL_Finger* "SDL_GetTouchFinger"))
(define SDL_GetVersion (c-lambda (SDL_version*) void "SDL_GetVersion"))
(define SDL_GetVideoDriver (c-lambda (int) char* "SDL_GetVideoDriver"))
(define SDL_GetWindowBrightness (c-lambda (SDL_Window*) float "SDL_GetWindowBrightness"))
(define SDL_GetWindowData (c-lambda (SDL_Window* char*) void* "SDL_GetWindowData"))
(define SDL_GetWindowDisplayIndex (c-lambda (SDL_Window*) int "SDL_GetWindowDisplayIndex"))
(define SDL_GetWindowDisplayMode (c-lambda (SDL_Window* SDL_DisplayMode*) int "SDL_GetWindowDisplayMode"))
(define SDL_GetWindowFlags (c-lambda (SDL_Window*) unsigned-int32 "SDL_GetWindowFlags"))
(define SDL_GetWindowFromID (c-lambda (unsigned-int32) SDL_Window* "SDL_GetWindowFromID"))
(define SDL_GetWindowGammaRamp (c-lambda (SDL_Window* unsigned-int16* unsigned-int16* unsigned-int16*) int "SDL_GetWindowGammaRamp"))
(define SDL_GetWindowGrab (c-lambda (SDL_Window*) SDL_bool "SDL_GetWindowGrab"))
(define SDL_GetWindowID (c-lambda (SDL_Window*) unsigned-int32 "SDL_GetWindowID"))
(define SDL_GetWindowMaximumSize (c-lambda (SDL_Window* int* int*) void "SDL_GetWindowMaximumSize"))
(define SDL_GetWindowMinimumSize (c-lambda (SDL_Window* int* int*) void "SDL_GetWindowMinimumSize"))
(define SDL_GetWindowPixelFormat (c-lambda (SDL_Window*) unsigned-int32 "SDL_GetWindowPixelFormat"))
(define SDL_GetWindowPosition (c-lambda (SDL_Window* int* int*) void "SDL_GetWindowPosition"))
(define SDL_GetWindowSize (c-lambda (SDL_Window* int* int*) void "SDL_GetWindowSize"))
(define SDL_GetWindowSurface (c-lambda (SDL_Window*) SDL_Surface* "SDL_GetWindowSurface"))
(define SDL_GetWindowTitle (c-lambda (SDL_Window*) char* "SDL_GetWindowTitle"))
(define SDL_GetWindowWMInfo (c-lambda (SDL_Window* SDL_SysWMinfo*) SDL_bool "SDL_GetWindowWMInfo"))
(define SDL_HapticClose (c-lambda (SDL_Haptic*) void "SDL_HapticClose"))
(define SDL_HapticDestroyEffect (c-lambda (SDL_Haptic* int) void "SDL_HapticDestroyEffect"))
(define SDL_HapticEffectSupported (c-lambda (SDL_Haptic* SDL_HapticEffect*) int "SDL_HapticEffectSupported"))
(define SDL_HapticGetEffectStatus (c-lambda (SDL_Haptic* int) int "SDL_HapticGetEffectStatus"))
(define SDL_HapticIndex (c-lambda (SDL_Haptic*) int "SDL_HapticIndex"))
(define SDL_HapticName (c-lambda (int) char* "SDL_HapticName"))
(define SDL_HapticNewEffect (c-lambda (SDL_Haptic* SDL_HapticEffect*) int "SDL_HapticNewEffect"))
(define SDL_HapticNumAxes (c-lambda (SDL_Haptic*) int "SDL_HapticNumAxes"))
(define SDL_HapticNumEffects (c-lambda (SDL_Haptic*) int "SDL_HapticNumEffects"))
(define SDL_HapticNumEffectsPlaying (c-lambda (SDL_Haptic*) int "SDL_HapticNumEffectsPlaying"))
(define SDL_HapticOpen (c-lambda (int) SDL_Haptic* "SDL_HapticOpen"))
(define SDL_HapticOpenFromJoystick (c-lambda (SDL_Joystick*) SDL_Haptic* "SDL_HapticOpenFromJoystick"))
(define SDL_HapticOpenFromMouse (c-lambda () SDL_Haptic* "SDL_HapticOpenFromMouse"))
(define SDL_HapticOpened (c-lambda (int) int "SDL_HapticOpened"))
(define SDL_HapticPause (c-lambda (SDL_Haptic*) int "SDL_HapticPause"))
(define SDL_HapticQuery (c-lambda (SDL_Haptic*) unsigned-int "SDL_HapticQuery"))
(define SDL_HapticRumbleInit (c-lambda (SDL_Haptic*) int "SDL_HapticRumbleInit"))
(define SDL_HapticRumblePlay (c-lambda (SDL_Haptic* float unsigned-int32) int "SDL_HapticRumblePlay"))
(define SDL_HapticRumbleStop (c-lambda (SDL_Haptic*) int "SDL_HapticRumbleStop"))
(define SDL_HapticRumbleSupported (c-lambda (SDL_Haptic*) int "SDL_HapticRumbleSupported"))
(define SDL_HapticRunEffect (c-lambda (SDL_Haptic* int unsigned-int32) int "SDL_HapticRunEffect"))
(define SDL_HapticSetAutocenter (c-lambda (SDL_Haptic* int) int "SDL_HapticSetAutocenter"))
(define SDL_HapticSetGain (c-lambda (SDL_Haptic* int) int "SDL_HapticSetGain"))
(define SDL_HapticStopAll (c-lambda (SDL_Haptic*) int "SDL_HapticStopAll"))
(define SDL_HapticStopEffect (c-lambda (SDL_Haptic* int) int "SDL_HapticStopEffect"))
(define SDL_HapticUnpause (c-lambda (SDL_Haptic*) int "SDL_HapticUnpause"))
(define SDL_HapticUpdateEffect (c-lambda (SDL_Haptic* int SDL_HapticEffect*) int "SDL_HapticUpdateEffect"))
(define SDL_Has3DNow (c-lambda () SDL_bool "SDL_Has3DNow"))
(define SDL_HasAltiVec (c-lambda () SDL_bool "SDL_HasAltiVec"))
(define SDL_HasClipboardText (c-lambda () SDL_bool "SDL_HasClipboardText"))
(define SDL_HasEvent (c-lambda (unsigned-int32) SDL_bool "SDL_HasEvent"))
(define SDL_HasEvents (c-lambda (unsigned-int32 unsigned-int32) SDL_bool "SDL_HasEvents"))
(define SDL_HasIntersection (c-lambda (SDL_Rect* SDL_Rect*) SDL_bool "SDL_HasIntersection"))
(define SDL_HasMMX (c-lambda () SDL_bool "SDL_HasMMX"))
(define SDL_HasRDTSC (c-lambda () SDL_bool "SDL_HasRDTSC"))
(define SDL_HasSSE (c-lambda () SDL_bool "SDL_HasSSE"))
(define SDL_HasSSE2 (c-lambda () SDL_bool "SDL_HasSSE2"))
(define SDL_HasSSE3 (c-lambda () SDL_bool "SDL_HasSSE3"))
(define SDL_HasSSE41 (c-lambda () SDL_bool "SDL_HasSSE41"))
(define SDL_HasSSE42 (c-lambda () SDL_bool "SDL_HasSSE42"))
(define SDL_HasScreenKeyboardSupport (c-lambda () SDL_bool "SDL_HasScreenKeyboardSupport"))
(define SDL_HideWindow (c-lambda (SDL_Window*) void "SDL_HideWindow"))
(define SDL_Init (c-lambda (unsigned-int32) int "SDL_Init"))
(define SDL_InitSubSystem (c-lambda (unsigned-int32) int "SDL_InitSubSystem"))
(define SDL_IntersectRect (c-lambda (SDL_Rect* SDL_Rect* SDL_Rect*) SDL_bool "SDL_IntersectRect"))
(define SDL_IntersectRectAndLine (c-lambda (SDL_Rect* int* int* int* int*) SDL_bool "SDL_IntersectRectAndLine"))
(define SDL_IsGameController (c-lambda (int) SDL_bool "SDL_IsGameController"))
(define SDL_IsScreenKeyboardShown (c-lambda (SDL_Window*) SDL_bool "SDL_IsScreenKeyboardShown"))
(define SDL_IsScreenSaverEnabled (c-lambda () SDL_bool "SDL_IsScreenSaverEnabled"))
(define SDL_IsTextInputActive (c-lambda () SDL_bool "SDL_IsTextInputActive"))
(define SDL_JoystickClose (c-lambda (SDL_Joystick*) void "SDL_JoystickClose"))
(define SDL_JoystickEventState (c-lambda (int) int "SDL_JoystickEventState"))
(define SDL_JoystickGetAttached (c-lambda (SDL_Joystick*) SDL_bool "SDL_JoystickGetAttached"))
(define SDL_JoystickGetAxis (c-lambda (SDL_Joystick* int) int16 "SDL_JoystickGetAxis"))
(define SDL_JoystickGetBall (c-lambda (SDL_Joystick* int int* int*) int "SDL_JoystickGetBall"))
(define SDL_JoystickGetButton (c-lambda (SDL_Joystick* int) unsigned-int8 "SDL_JoystickGetButton"))
;; (define SDL_JoystickGetDeviceGUID (c-lambda (int) SDL_JoystickGUID "SDL_JoystickGetDeviceGUID"))
;; (define SDL_JoystickGetGUID (c-lambda (SDL_Joystick*) SDL_JoystickGUID "SDL_JoystickGetGUID"))
;; (define SDL_JoystickGetGUIDFromString (c-lambda (char*) SDL_JoystickGUID "SDL_JoystickGetGUIDFromString"))
;; (define SDL_JoystickGetGUIDString (c-lambda (SDL_JoystickGUID char* int) void "SDL_JoystickGetGUIDString"))
(define SDL_JoystickGetHat (c-lambda (SDL_Joystick* int) unsigned-int8 "SDL_JoystickGetHat"))
(define SDL_JoystickInstanceID (c-lambda (SDL_Joystick*) SDL_JoystickID "SDL_JoystickInstanceID"))
(define SDL_JoystickIsHaptic (c-lambda (SDL_Joystick*) int "SDL_JoystickIsHaptic"))
(define SDL_JoystickName (c-lambda (SDL_Joystick*) char* "SDL_JoystickName"))
(define SDL_JoystickNameForIndex (c-lambda (int) char* "SDL_JoystickNameForIndex"))
(define SDL_JoystickNumAxes (c-lambda (SDL_Joystick*) int "SDL_JoystickNumAxes"))
(define SDL_JoystickNumBalls (c-lambda (SDL_Joystick*) int "SDL_JoystickNumBalls"))
(define SDL_JoystickNumButtons (c-lambda (SDL_Joystick*) int "SDL_JoystickNumButtons"))
(define SDL_JoystickNumHats (c-lambda (SDL_Joystick*) int "SDL_JoystickNumHats"))
(define SDL_JoystickOpen (c-lambda (int) SDL_Joystick* "SDL_JoystickOpen"))
(define SDL_JoystickUpdate (c-lambda () void "SDL_JoystickUpdate"))
(define SDL_LoadBMP (c-lambda (char*) SDL_Surface* "SDL_LoadBMP"))
(define SDL_LoadBMP_RW (c-lambda (SDL_RWops* int) SDL_Surface* "SDL_LoadBMP_RW"))
(define SDL_LoadDollarTemplates (c-lambda (SDL_TouchID SDL_RWops*) int "SDL_LoadDollarTemplates"))
(define SDL_LoadFunction (c-lambda (void* char*) void* "SDL_LoadFunction"))
(define SDL_LoadObject (c-lambda (char*) void* "SDL_LoadObject"))
(define SDL_LoadWAV (c-lambda (char* SDL_AudioSpec* unsigned-int8** unsigned-int32*) SDL_AudioSpec* "SDL_LoadWAV"))
(define SDL_LoadWAV_RW (c-lambda (SDL_RWops* int SDL_AudioSpec* unsigned-int8** unsigned-int32*) SDL_AudioSpec* "SDL_LoadWAV_RW"))
(define SDL_LockAudio (c-lambda () void "SDL_LockAudio"))
(define SDL_LockAudioDevice (c-lambda (SDL_AudioDeviceID) void "SDL_LockAudioDevice"))
(define SDL_LockMutex (c-lambda (SDL_mutex*) int "SDL_LockMutex"))
(define SDL_LockSurface (c-lambda (SDL_Surface*) int "SDL_LockSurface"))
(define SDL_LockTexture (c-lambda (SDL_Texture* SDL_Rect* void** int*) int "SDL_LockTexture"))
(define SDL_Log (c-lambda (char*) void "SDL_Log"))
(define SDL_LogCritical (c-lambda (int char*) void "SDL_LogCritical"))
(define SDL_LogDebug (c-lambda (int char*) void "SDL_LogDebug"))
(define SDL_LogError (c-lambda (int char*) void "SDL_LogError"))
(define SDL_LogGetOutputFunction (c-lambda (SDL_LogOutputFunction* void**) void "SDL_LogGetOutputFunction"))
(define SDL_LogGetPriority (c-lambda (int) SDL_LogPriority "SDL_LogGetPriority"))
(define SDL_LogInfo (c-lambda (int char*) void "SDL_LogInfo"))
(define SDL_LogMessage (c-lambda (int SDL_LogPriority char*) void "SDL_LogMessage"))
(define SDL_LogResetPriorities (c-lambda () void "SDL_LogResetPriorities"))
(define SDL_LogSetAllPriority (c-lambda (SDL_LogPriority) void "SDL_LogSetAllPriority"))
(define SDL_LogSetOutputFunction (c-lambda (SDL_LogOutputFunction void*) void "SDL_LogSetOutputFunction"))
(define SDL_LogSetPriority (c-lambda (int SDL_LogPriority) void "SDL_LogSetPriority"))
(define SDL_LogVerbose (c-lambda (int char*) void "SDL_LogVerbose"))
(define SDL_LogWarn (c-lambda (int char*) void "SDL_LogWarn"))
(define SDL_LowerBlit (c-lambda (SDL_Surface* SDL_Rect* SDL_Surface* SDL_Rect*) int "SDL_LowerBlit"))
(define SDL_LowerBlitScaled (c-lambda (SDL_Surface* SDL_Rect* SDL_Surface* SDL_Rect*) int "SDL_LowerBlitScaled"))
(define SDL_MUSTLOCK (c-lambda (SDL_Surface*) SDL_bool "SDL_MUSTLOCK"))
(define SDL_MapRGB (c-lambda (SDL_PixelFormat* unsigned-int8 unsigned-int8 unsigned-int8) unsigned-int32 "SDL_MapRGB"))
(define SDL_MapRGBA (c-lambda (SDL_PixelFormat* unsigned-int8 unsigned-int8 unsigned-int8 unsigned-int8) unsigned-int32 "SDL_MapRGBA"))
(define SDL_MasksToPixelFormatEnum (c-lambda (int unsigned-int32 unsigned-int32 unsigned-int32 unsigned-int32) unsigned-int32 "SDL_MasksToPixelFormatEnum"))
(define SDL_MaximizeWindow (c-lambda (SDL_Window*) void "SDL_MaximizeWindow"))
(define SDL_MinimizeWindow (c-lambda (SDL_Window*) void "SDL_MinimizeWindow"))
(define SDL_MixAudio (c-lambda (unsigned-int8* unsigned-int8* unsigned-int32 int) void "SDL_MixAudio"))
(define SDL_MixAudioFormat (c-lambda (unsigned-int8* unsigned-int8* SDL_AudioFormat unsigned-int32 int) void "SDL_MixAudioFormat"))
(define SDL_MostSignificantBitIndex32 (c-lambda (unsigned-int32) int "SDL_MostSignificantBitIndex32"))
(define SDL_MouseIsHaptic (c-lambda () int "SDL_MouseIsHaptic"))
(define SDL_NumHaptics (c-lambda () int "SDL_NumHaptics"))
(define SDL_NumJoysticks (c-lambda () int "SDL_NumJoysticks"))
(define SDL_OpenAudio (c-lambda (SDL_AudioSpec* SDL_AudioSpec*) int "SDL_OpenAudio"))
(define SDL_OpenAudioDevice (c-lambda (char* int SDL_AudioSpec* SDL_AudioSpec* int) SDL_AudioDeviceID "SDL_OpenAudioDevice"))
(define SDL_PauseAudio (c-lambda (int) void "SDL_PauseAudio"))
(define SDL_PauseAudioDevice (c-lambda (SDL_AudioDeviceID int) void "SDL_PauseAudioDevice"))
(define SDL_PeepEvents (c-lambda (SDL_Event* int SDL_eventaction unsigned-int32 unsigned-int32) int "SDL_PeepEvents"))
(define SDL_PixelFormatEnumToMasks (c-lambda (unsigned-int32 int* unsigned-int32* unsigned-int32* unsigned-int32* unsigned-int32*) SDL_bool "SDL_PixelFormatEnumToMasks"))
(define SDL_PollEvent (c-lambda (SDL_Event*) int "SDL_PollEvent"))
(define SDL_PumpEvents (c-lambda () void "SDL_PumpEvents"))
(define SDL_PushEvent (c-lambda (SDL_Event*) int "SDL_PushEvent"))
(define SDL_QueryTexture (c-lambda (SDL_Texture* unsigned-int32* int* int* int*) int "SDL_QueryTexture"))
(define SDL_Quit (c-lambda () void "SDL_Quit"))
(define SDL_QuitRequested (c-lambda () SDL_bool "SDL_QuitRequested"))
(define SDL_QuitSubSystem (c-lambda (unsigned-int32) void "SDL_QuitSubSystem"))
(define SDL_RWFromConstMem (c-lambda (void* int) SDL_RWops* "SDL_RWFromConstMem"))
(define SDL_RWFromFP (c-lambda (void* SDL_bool) SDL_RWops* "SDL_RWFromFP"))
(define SDL_RWFromFile (c-lambda (char* char*) SDL_RWops* "SDL_RWFromFile"))
(define SDL_RWFromMem (c-lambda (void* int) SDL_RWops* "SDL_RWFromMem"))
(define SDL_RWclose (c-lambda (SDL_RWops*) int "SDL_RWclose"))
(define SDL_RWread (c-lambda (SDL_RWops* void* size-t size-t) size-t "SDL_RWread"))
(define SDL_RWseek (c-lambda (SDL_RWops* int64 int) int64 "SDL_RWseek"))
(define SDL_RWtell (c-lambda (SDL_RWops*) int64 "SDL_RWtell"))
(define SDL_RWwrite (c-lambda (SDL_RWops* void* size-t size-t) size-t "SDL_RWwrite"))
(define SDL_RaiseWindow (c-lambda (SDL_Window*) void "SDL_RaiseWindow"))
(define SDL_ReadBE16 (c-lambda (SDL_RWops*) unsigned-int16 "SDL_ReadBE16"))
(define SDL_ReadBE32 (c-lambda (SDL_RWops*) unsigned-int32 "SDL_ReadBE32"))
(define SDL_ReadBE64 (c-lambda (SDL_RWops*) unsigned-int64 "SDL_ReadBE64"))
(define SDL_ReadLE16 (c-lambda (SDL_RWops*) unsigned-int16 "SDL_ReadLE16"))
(define SDL_ReadLE32 (c-lambda (SDL_RWops*) unsigned-int32 "SDL_ReadLE32"))
(define SDL_ReadLE64 (c-lambda (SDL_RWops*) unsigned-int64 "SDL_ReadLE64"))
(define SDL_RecordGesture (c-lambda (SDL_TouchID) int "SDL_RecordGesture"))
(define SDL_RectEmpty (c-lambda (SDL_Rect*) SDL_bool "SDL_RectEmpty"))
(define SDL_RectEquals (c-lambda (SDL_Rect* SDL_Rect*) SDL_bool "SDL_RectEquals"))
(define SDL_RegisterEvents (c-lambda (int) unsigned-int32 "SDL_RegisterEvents"))
(define SDL_RemoveTimer (c-lambda (SDL_TimerID) SDL_bool "SDL_RemoveTimer"))
(define SDL_RenderClear (c-lambda (SDL_Renderer*) int "SDL_RenderClear"))
(define SDL_RenderCopy (c-lambda (SDL_Renderer* SDL_Texture* SDL_Rect* SDL_Rect*) int "SDL_RenderCopy"))
(define SDL_RenderCopyEx (c-lambda (SDL_Renderer* SDL_Texture* SDL_Rect* SDL_Rect* double SDL_Point* SDL_RendererFlip) int "SDL_RenderCopyEx"))
(define SDL_RenderDrawLine (c-lambda (SDL_Renderer* int int int int) int "SDL_RenderDrawLine"))
(define SDL_RenderDrawLines (c-lambda (SDL_Renderer* SDL_Point* int) int "SDL_RenderDrawLines"))
(define SDL_RenderDrawPoint (c-lambda (SDL_Renderer* int int) int "SDL_RenderDrawPoint"))
(define SDL_RenderDrawPoints (c-lambda (SDL_Renderer* SDL_Point* int) int "SDL_RenderDrawPoints"))
(define SDL_RenderDrawRect (c-lambda (SDL_Renderer* SDL_Rect*) int "SDL_RenderDrawRect"))
(define SDL_RenderDrawRects (c-lambda (SDL_Renderer* SDL_Rect* int) int "SDL_RenderDrawRects"))
(define SDL_RenderFillRect (c-lambda (SDL_Renderer* SDL_Rect*) int "SDL_RenderFillRect"))
(define SDL_RenderFillRects (c-lambda (SDL_Renderer* SDL_Rect* int) int "SDL_RenderFillRects"))
(define SDL_RenderGetClipRect (c-lambda (SDL_Renderer* SDL_Rect*) void "SDL_RenderGetClipRect"))
(define SDL_RenderGetLogicalSize (c-lambda (SDL_Renderer* int* int*) void "SDL_RenderGetLogicalSize"))
(define SDL_RenderGetScale (c-lambda (SDL_Renderer* float* float*) void "SDL_RenderGetScale"))
(define SDL_RenderGetViewport (c-lambda (SDL_Renderer* SDL_Rect*) void "SDL_RenderGetViewport"))
(define SDL_RenderPresent (c-lambda (SDL_Renderer*) void "SDL_RenderPresent"))
(define SDL_RenderReadPixels (c-lambda (SDL_Renderer* SDL_Rect* unsigned-int32 void* int) int "SDL_RenderReadPixels"))
(define SDL_RenderSetClipRect (c-lambda (SDL_Renderer* SDL_Rect*) int "SDL_RenderSetClipRect"))
(define SDL_RenderSetLogicalSize (c-lambda (SDL_Renderer* int int) int "SDL_RenderSetLogicalSize"))
(define SDL_RenderSetScale (c-lambda (SDL_Renderer* float float) int "SDL_RenderSetScale"))
(define SDL_RenderSetViewport (c-lambda (SDL_Renderer* SDL_Rect*) int "SDL_RenderSetViewport"))
(define SDL_RenderTargetSupported (c-lambda (SDL_Renderer*) SDL_bool "SDL_RenderTargetSupported"))
(cond-expand
 (sdl:assert
  (define SDL_ResetAssertionReport (c-lambda () void "SDL_ResetAssertionReport")))
 (else #!void))
(define SDL_RestoreWindow (c-lambda (SDL_Window*) void "SDL_RestoreWindow"))
(define SDL_SaveAllDollarTemplates (c-lambda (SDL_RWops*) int "SDL_SaveAllDollarTemplates"))
(define SDL_SaveBMP (c-lambda (SDL_Surface* char*) int "SDL_SaveBMP"))
(define SDL_SaveBMP_RW (c-lambda (SDL_Surface* SDL_RWops* int) int "SDL_SaveBMP_RW"))
(define SDL_SaveDollarTemplate (c-lambda (SDL_GestureID SDL_RWops*) int "SDL_SaveDollarTemplate"))
(define SDL_SemPost (c-lambda (SDL_sem*) int "SDL_SemPost"))
(define SDL_SemTryWait (c-lambda (SDL_sem*) int "SDL_SemTryWait"))
(define SDL_SemValue (c-lambda (SDL_sem*) unsigned-int32 "SDL_SemValue"))
(define SDL_SemWait (c-lambda (SDL_sem*) int "SDL_SemWait"))
(define SDL_SemWaitTimeout (c-lambda (SDL_sem* unsigned-int32) int "SDL_SemWaitTimeout"))
(cond-expand
 (sdl:assert
  (define SDL_SetAssertionHandler (c-lambda (SDL_AssertionHandler void*) void "SDL_SetAssertionHandler")))
 (else #!void))
(define SDL_SetClipRect (c-lambda (SDL_Surface* SDL_Rect*) SDL_bool "SDL_SetClipRect"))
(define SDL_SetClipboardText (c-lambda (char*) int "SDL_SetClipboardText"))
(define SDL_SetColorKey (c-lambda (SDL_Surface* int unsigned-int32) int "SDL_SetColorKey"))
(define SDL_SetCursor (c-lambda (SDL_Cursor*) void "SDL_SetCursor"))
(define SDL_SetError (c-lambda (char*) int "SDL_SetError"))
(define SDL_SetEventFilter (c-lambda (SDL_EventFilter void*) void "SDL_SetEventFilter"))
(define SDL_SetHint (c-lambda (char* char*) SDL_bool "SDL_SetHint"))
(define SDL_SetHintWithPriority (c-lambda (char* char* SDL_HintPriority) SDL_bool "SDL_SetHintWithPriority"))
(define SDL_SetMainReady (c-lambda () void "SDL_SetMainReady"))
(define SDL_SetModState (c-lambda (SDL_Keymod) void "SDL_SetModState"))
(define SDL_SetPaletteColors (c-lambda (SDL_Palette* SDL_Color* int int) int "SDL_SetPaletteColors"))
(define SDL_SetPixelFormatPalette (c-lambda (SDL_PixelFormat* SDL_Palette*) int "SDL_SetPixelFormatPalette"))
(define SDL_SetRelativeMouseMode (c-lambda (SDL_bool) int "SDL_SetRelativeMouseMode"))
(define SDL_SetRenderDrawBlendMode (c-lambda (SDL_Renderer* SDL_BlendMode) int "SDL_SetRenderDrawBlendMode"))
(define SDL_SetRenderDrawColor (c-lambda (SDL_Renderer* unsigned-int8 unsigned-int8 unsigned-int8 unsigned-int8) int "SDL_SetRenderDrawColor"))
(define SDL_SetRenderTarget (c-lambda (SDL_Renderer* SDL_Texture*) int "SDL_SetRenderTarget"))
(define SDL_SetSurfaceAlphaMod (c-lambda (SDL_Surface* unsigned-int8) int "SDL_SetSurfaceAlphaMod"))
(define SDL_SetSurfaceBlendMode (c-lambda (SDL_Surface* SDL_BlendMode) int "SDL_SetSurfaceBlendMode"))
(define SDL_SetSurfaceColorMod (c-lambda (SDL_Surface* unsigned-int8 unsigned-int8 unsigned-int8) int "SDL_SetSurfaceColorMod"))
(define SDL_SetSurfacePalette (c-lambda (SDL_Surface* SDL_Palette*) int "SDL_SetSurfacePalette"))
(define SDL_SetSurfaceRLE (c-lambda (SDL_Surface* int) int "SDL_SetSurfaceRLE"))
(define SDL_SetTextInputRect (c-lambda (SDL_Rect*) void "SDL_SetTextInputRect"))
(define SDL_SetTextureAlphaMod (c-lambda (SDL_Texture* unsigned-int8) int "SDL_SetTextureAlphaMod"))
(define SDL_SetTextureBlendMode (c-lambda (SDL_Texture* SDL_BlendMode) int "SDL_SetTextureBlendMode"))
(define SDL_SetTextureColorMod (c-lambda (SDL_Texture* unsigned-int8 unsigned-int8 unsigned-int8) int "SDL_SetTextureColorMod"))
(cond-expand
 (sdl:threads
  (define SDL_SetThreadPriority (c-lambda (SDL_ThreadPriority) int "SDL_SetThreadPriority")))
 (else #!void))
(define SDL_SetWindowBordered (c-lambda (SDL_Window* SDL_bool) void "SDL_SetWindowBordered"))
(define SDL_SetWindowBrightness (c-lambda (SDL_Window* float) int "SDL_SetWindowBrightness"))
(define SDL_SetWindowData (c-lambda (SDL_Window* char* void*) void* "SDL_SetWindowData"))
(define SDL_SetWindowDisplayMode (c-lambda (SDL_Window* SDL_DisplayMode*) int "SDL_SetWindowDisplayMode"))
(define SDL_SetWindowFullscreen (c-lambda (SDL_Window* unsigned-int32) int "SDL_SetWindowFullscreen"))
(define SDL_SetWindowGammaRamp (c-lambda (SDL_Window* unsigned-int16* unsigned-int16* unsigned-int16*) int "SDL_SetWindowGammaRamp"))
(define SDL_SetWindowGrab (c-lambda (SDL_Window* SDL_bool) void "SDL_SetWindowGrab"))
(define SDL_SetWindowIcon (c-lambda (SDL_Window* SDL_Surface*) void "SDL_SetWindowIcon"))
(define SDL_SetWindowMaximumSize (c-lambda (SDL_Window* int int) void "SDL_SetWindowMaximumSize"))
(define SDL_SetWindowMinimumSize (c-lambda (SDL_Window* int int) void "SDL_SetWindowMinimumSize"))
(define SDL_SetWindowPosition (c-lambda (SDL_Window* int int) void "SDL_SetWindowPosition"))
(define SDL_SetWindowSize (c-lambda (SDL_Window* int int) void "SDL_SetWindowSize"))
(define SDL_SetWindowTitle (c-lambda (SDL_Window* char*) void "SDL_SetWindowTitle"))
(define SDL_ShowCursor (c-lambda (int) int "SDL_ShowCursor"))
(define SDL_ShowMessageBox (c-lambda (SDL_MessageBoxData* int*) int "SDL_ShowMessageBox"))
(define SDL_ShowSimpleMessageBox (c-lambda (unsigned-int32 char* char* SDL_Window*) int "SDL_ShowSimpleMessageBox"))
(define SDL_ShowWindow (c-lambda (SDL_Window*) void "SDL_ShowWindow"))
(define SDL_StartTextInput (c-lambda () void "SDL_StartTextInput"))
(define SDL_StopTextInput (c-lambda () void "SDL_StopTextInput"))
(define SDL_Swap16 (c-lambda (unsigned-int16) unsigned-int16 "SDL_Swap16"))
(define SDL_Swap32 (c-lambda (unsigned-int32) unsigned-int32 "SDL_Swap32"))
(define SDL_Swap64 (c-lambda (unsigned-int64) unsigned-int64 "SDL_Swap64"))
(define SDL_SwapBE16 (c-lambda (unsigned-int16) unsigned-int16 "SDL_SwapBE16"))
(define SDL_SwapBE32 (c-lambda (unsigned-int32) unsigned-int32 "SDL_SwapBE32"))
(define SDL_SwapBE64 (c-lambda (unsigned-int64) unsigned-int64 "SDL_SwapBE64"))
(define SDL_SwapFloat (c-lambda (float) float "SDL_SwapFloat"))
(define SDL_SwapFloatBE (c-lambda (float) float "SDL_SwapFloatBE"))
(define SDL_SwapFloatLE (c-lambda (float) float "SDL_SwapFloatLE"))
(define SDL_SwapLE16 (c-lambda (unsigned-int16) unsigned-int16 "SDL_SwapLE16"))
(define SDL_SwapLE32 (c-lambda (unsigned-int32) unsigned-int32 "SDL_SwapLE32"))
(define SDL_SwapLE64 (c-lambda (unsigned-int64) unsigned-int64 "SDL_SwapLE64"))
(cond-expand
 (sdl:threads
  (define SDL_TLSCreate (c-lambda () SDL_TLSID "SDL_TLSCreate"))
  (define SDL_TLSGet (c-lambda (SDL_TLSID) void* "SDL_TLSGet"))
  (define SDL_ThreadID (c-lambda () SDL_threadID "SDL_ThreadID")))
 (else #!void))
(define SDL_TriggerBreakpoint (c-lambda () void "SDL_TriggerBreakpoint"))
(define SDL_TryLockMutex (c-lambda (SDL_mutex*) int "SDL_TryLockMutex"))
(define SDL_UnionRect (c-lambda (SDL_Rect* SDL_Rect* SDL_Rect*) void "SDL_UnionRect"))
(define SDL_UnloadObject (c-lambda (void*) void "SDL_UnloadObject"))
(define SDL_UnlockAudio (c-lambda () void "SDL_UnlockAudio"))
(define SDL_UnlockAudioDevice (c-lambda (SDL_AudioDeviceID) void "SDL_UnlockAudioDevice"))
(define SDL_UnlockMutex (c-lambda (SDL_mutex*) int "SDL_UnlockMutex"))
(define SDL_UnlockSurface (c-lambda (SDL_Surface*) void "SDL_UnlockSurface"))
(define SDL_UnlockTexture (c-lambda (SDL_Texture*) void "SDL_UnlockTexture"))
(define SDL_UpdateTexture (c-lambda (SDL_Texture* SDL_Rect* void* int) int "SDL_UpdateTexture"))
(define SDL_UpdateWindowSurface (c-lambda (SDL_Window*) int "SDL_UpdateWindowSurface"))
(define SDL_UpdateWindowSurfaceRects (c-lambda (SDL_Window* SDL_Rect* int) int "SDL_UpdateWindowSurfaceRects"))
(define SDL_UpdateYUVTexture (c-lambda (SDL_Texture* SDL_Rect* unsigned-int8* int unsigned-int8* int unsigned-int8* int) int "SDL_UpdateYUVTexture"))
(define SDL_VideoInit (c-lambda (char*) int "SDL_VideoInit"))
(define SDL_VideoQuit (c-lambda () void "SDL_VideoQuit"))
(define SDL_WaitEvent (c-lambda (SDL_Event*) int "SDL_WaitEvent"))
(define SDL_WaitEventTimeout (c-lambda (SDL_Event* int) int "SDL_WaitEventTimeout"))
(cond-expand
 (sdl:threads
  (define SDL_WaitThread (c-lambda (SDL_Thread* int*) void "SDL_WaitThread")))
 (else #!void))
(define SDL_WarpMouseInWindow (c-lambda (SDL_Window* int int) void "SDL_WarpMouseInWindow"))
(define SDL_WasInit (c-lambda (unsigned-int32) unsigned-int32 "SDL_WasInit"))
(define SDL_WriteBE16 (c-lambda (SDL_RWops* unsigned-int16) size-t "SDL_WriteBE16"))
(define SDL_WriteBE32 (c-lambda (SDL_RWops* unsigned-int32) size-t "SDL_WriteBE32"))
(define SDL_WriteBE64 (c-lambda (SDL_RWops* unsigned-int64) size-t "SDL_WriteBE64"))
(define SDL_WriteLE16 (c-lambda (SDL_RWops* unsigned-int16) size-t "SDL_WriteLE16"))
(define SDL_WriteLE32 (c-lambda (SDL_RWops* unsigned-int32) size-t "SDL_WriteLE32"))
(define SDL_WriteLE64 (c-lambda (SDL_RWops* unsigned-int64) size-t "SDL_WriteLE64"))
